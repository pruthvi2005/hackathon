// jsFiles/points.js - Comprehensive Points Management System
import { initializeApp } from "https://www.gstatic.com/firebasejs/12.2.1/firebase-app.js";
import { 
    getAuth, 
    onAuthStateChanged,
    signInWithEmailAndPassword
} from "https://www.gstatic.com/firebasejs/12.2.1/firebase-auth.js";
import { 
    getFirestore, 
    doc, 
    getDoc, 
    setDoc, 
    updateDoc, 
    increment, 
    collection, 
    query, 
    where, 
    getDocs, 
    orderBy, 
    limit 
} from "https://www.gstatic.com/firebasejs/12.2.1/firebase-firestore.js";

// Toast notification function
function showToast(message, type = 'success') {
    // Remove any existing toasts
    const existingToasts = document.querySelectorAll('.toast-notification');
    existingToasts.forEach(toast => toast.remove());
    
    const toast = document.createElement('div');
    toast.className = `toast-notification ${type}`;
    toast.textContent = message;
    
    // Add styles if not already added
    if (!document.getElementById('toast-styles')) {
        const style = document.createElement('style');
        style.id = 'toast-styles';
        style.textContent = `
            .toast-notification {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 25px;
                border-radius: 8px;
                color: white;
                font-family: 'Poppins', sans-serif;
                font-weight: 500;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 1000;
                transform: translateX(120%);
                transition: transform 0.3s ease-in-out;
            }
            .toast-notification.show {
                transform: translateX(0);
            }
            .toast-notification.success {
                background-color: #2ecc71;
            }
            .toast-notification.error {
                background-color: #e74c3c;
            }
            .toast-notification.warning {
                background-color: #f39c12;
            }
        `;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(toast);
    
    // Trigger the show animation
    setTimeout(() => toast.classList.add('show'), 10);
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
    }, 5000);
}

// Firebase configuration
const firebaseConfig = {
    apiKey: "AIzaSyB8ouWfnnQ3YkpvRl65BZzjdwITHLLhhtc",
    authDomain: "ecolearn-7152f.firebaseapp.com",
    projectId: "ecolearn-7152f",
    storageBucket: "ecolearn-7152f.firebasestorage.app",
    messagingSenderId: "1097902011754",
    appId: "1:1097902011754:web:1f7b8c9e8f0a1b2c3d4e5f"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// Track claimed points in session storage to prevent double claims
const CLAIMED_PREFIX = 'claimed_';

/**
 * Updates the leaderboard with the user's new points
 * @private
 */
async function updateLeaderboard(userId, displayName, school, pointsAdded) {
    try {
        const leaderboardRef = doc(db, "leaderboard", userId);
        await setDoc(leaderboardRef, {
            displayName: displayName,
            school: school,
            points: increment(pointsAdded),
            lastUpdated: new Date()
        }, { merge: true });

        // Also update school leaderboard
        if (school && school !== "Unknown School") {
            const schoolRef = doc(db, "schoolLeaderboard", school);
            await setDoc(schoolRef, {
                points: increment(pointsAdded),
                lastUpdated: new Date()
            }, { merge: true });
        }
    } catch (error) {
        console.error("Error updating leaderboard:", error);
        throw error;
    }
}

/**
 * Awards points to the current user
 * @param {number} points - Points to award
 * @param {string} [source] - Optional source identifier (e.g., 'biodiversity_quiz')
 * @returns {Promise<{success: boolean, message: string, newTotal?: number}>}
 */
async function awardPoints(points, source = '') {
    try {
        console.log('Awarding points:', { points, source });
        
        // Force refresh the auth token to ensure we have the latest user
        const user = auth.currentUser;
        if (!user) {
            console.log('No user found in auth.currentUser');
            showToast('Please sign in to claim points', 'warning');
            return {
                success: false,
                message: "User not authenticated. Please sign in to earn points.",
                redirect: "/htmlFiles/Welcome/signin.html"
            };
        }
        
        console.log('Current user:', user.uid, user.email);
        
        // Check if points were already claimed for this source
        const claimKey = `${CLAIMED_PREFIX}${source || 'default'}`;
        const alreadyClaimed = sessionStorage.getItem(claimKey);
        console.log('Claim check:', { claimKey, alreadyClaimed });
        
        if (alreadyClaimed) {
            const msg = 'Points already claimed for this activity';
            console.log(msg);
            showToast(msg, 'warning');
            return { success: false, message: msg };
        }

        // Get user data to access school information
        const userDocRef = doc(db, "users", user.uid);
        console.log('Fetching user document:', user.uid);
        
        const userDoc = await getDoc(userDocRef);
        if (!userDoc.exists()) {
            const msg = "Please complete your registration to earn points";
            console.log('User document does not exist');
            showToast(msg, 'warning');
            return {
                success: false,
                message: msg,
                redirect: "/htmlFiles/Student/complete-profile.html"
            };
        }

        const userData = userDoc.data();
        const userSchool = userData.school || "Unknown School";
        const displayName = user.displayName || user.email.split('@')[0];

        // Update user's points
        const updateData = {
            ecoPoints: increment(points),
            lastUpdated: new Date()
        };
        
        // Only add the scores field if source is provided
        if (source) {
            updateData[`scores.${source}`] = increment(points);
        } else {
            updateData['scores.general'] = increment(points);
        }
        
        console.log('Updating user points:', updateData);
        
        try {
            await updateDoc(userDocRef, updateData);
            console.log('Successfully updated user points');
        } catch (updateError) {
            console.error('Error updating user points:', updateError);
            throw new Error(`Failed to update points: ${updateError.message}`);
        }

        // Update leaderboard
        try {
            await updateLeaderboard(user.uid, displayName, userSchool, points);
        } catch (leaderboardError) {
            console.error("Leaderboard update failed:", leaderboardError);
            // Continue even if leaderboard update fails
        }

        // Get updated points total
        const updatedUser = await getDoc(userDocRef);
        const newTotal = updatedUser.data()?.ecoPoints || 0;
        
        // Mark as claimed in session storage
        try {
            sessionStorage.setItem(claimKey, 'true');
            console.log('Marked points as claimed in session storage');
        } catch (storageError) {
            console.warn('Failed to save to sessionStorage:', storageError);
            // Continue even if session storage fails
        }
        
        // Show success message
        const successMsg = `ðŸŽ‰ Success! ${points} points added to your account!`;
        showToast(successMsg, 'success');

        return {
            success: true,
            message: `Successfully claimed ${points} points!`,
            newTotal: newTotal
        };
    } catch (error) {
        console.error("Error awarding points:", error);
        showToast(error.message, 'error');
        return {
            success: false,
            message: error.message
        };
    }
}

/**
 * Gets the top users from the leaderboard
 * @param {number} [limit=10] - Number of top users to return
 * @returns {Promise<Array>} Array of top users
 */
async function getTopUsers(limit = 10) {
    try {
        const q = query(
            collection(db, "leaderboard"),
            orderBy("points", "desc"),
            limit(limit)
        );
        const querySnapshot = await getDocs(q);
        return querySnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));
    } catch (error) {
        console.error("Error getting top users:", error);
        return [];
    }
}

/**
 * Gets the top schools from the school leaderboard
 * @param {number} [limit=10] - Number of top schools to return
 * @returns {Promise<Array>} Array of top schools
 */
async function getTopSchools(limit = 10) {
    try {
        const q = query(
            collection(db, "schoolLeaderboard"),
            orderBy("points", "desc"),
            limit(limit)
        );
        const querySnapshot = await getDocs(q);
        return querySnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));
    } catch (error) {
        console.error("Error getting top schools:", error);
        return [];
    }
}

/**
 * Gets the current user's leaderboard position
 * @returns {Promise<{rank: number, totalUsers: number}>} The user's rank and total number of users
 */
async function getUserRank() {
    try {
        const user = auth.currentUser;
        if (!user) return { rank: 0, totalUsers: 0 };
        
        // Get user's points
        const userDoc = await getDoc(doc(db, "users", user.uid));
        const userPoints = userDoc.data()?.ecoPoints || 0;
        
        if (userPoints === 0) return { rank: 0, totalUsers: 0 };
        
        // Get users with more points (better rank)
        const q = query(
            collection(db, "leaderboard"),
            where("points", ">", userPoints)
        );
        
        const snapshot = await getDocs(q);
        const rank = snapshot.size + 1;
        
        // Get total users
        const totalSnapshot = await getDocs(collection(db, "leaderboard"));
        
        return {
            rank,
            totalUsers: totalSnapshot.size
        };
    } catch (error) {
        console.error("Error getting user rank:", error);
        return { rank: 0, totalUsers: 0 };
    }
}

/**
 * Gets the current user's points
 * @returns {Promise<number>} The user's current points
 */
async function getUserPoints() {
    try {
        const user = auth.currentUser;
        if (!user) return 0;
        
        const userDoc = await getDoc(doc(db, "users", user.uid));
        return userDoc.data()?.ecoPoints || 0;
    } catch (error) {
        console.error("Error getting user points:", error);
        return 0;
    }
}

// Export all functions
const PointsSystem = {
    awardPoints,
    showToast,
    getTopUsers,
    getTopSchools,
    getUserRank,
    getUserPoints,
    auth,  // Export auth for other modules to use
    db     // Export db for other modules to use
};

export { PointsSystem };

// Initialize auth state listener to handle user changes
onAuthStateChanged(auth, async (user) => {
    if (user) {
        // User is signed in, update last active time
        try {
            const userRef = doc(db, "users", user.uid);
            await updateDoc(userRef, {
                lastActive: new Date()
            });
        } catch (error) {
            console.error("Error updating last active time:", error);
        }
    }
});
